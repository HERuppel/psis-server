generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Clinic {
  id    String @id @db.Uuid
  email String @unique @db.VarChar(100)
  name  String @db.VarChar(100)
  code  Int    @default(autoincrement())

  people Person[]

  @@map("clinic")
}

model Person {
  id            String   @id @db.Uuid
  email         String?  @unique @db.VarChar(100)
  name          String   @db.VarChar(100)
  domainClass   String   @map("domain_class") @db.VarChar(32)
  CPF           String   @map("cpf") @db.VarChar(16)
  birthDate     DateTime @map("birth_date") @db.Date
  contactNumber String?  @map("contact_number") @db.VarChar(32)
  createdAt     DateTime @default(now()) @map("created_at")

  clinicId String @map("clinic_id") @db.Uuid
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  address Address?
  user    User?
  patient Patient?
  liable  Liable?

  @@map("person")
}

model Address {
  id         String @id @db.Uuid
  city       String @db.VarChar(100)
  district   String @db.VarChar(100)
  publicArea String @map("public_area") @db.VarChar(255)

  personId String @unique @map("person_id") @db.Uuid
  person   Person @relation(fields: [personId], references: [id])

  @@map("address")
}

model User {
  userName      String  @map("user_name") @db.VarChar(100)
  active        Boolean @default(true)
  blocked       Boolean @default(false)
  loginAttempts Int     @default(0) @map("login_attempts")
  password      String  @db.VarChar(255)
  accessCode    Int     @default(autoincrement()) @map("access_code")

  id     String @id @unique @db.Uuid
  person Person @relation(fields: [id], references: [id])

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  professional Professional?

  @@map("user")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(36)

  users       User[]
  permissions Permission[]

  @@map("role")
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(36)

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  @@map("permission")
}

model Patient {
  gender        Int @db.SmallInt
  maritalStatus Int @map("marital_status") @db.SmallInt

  id     String @id @unique @db.Uuid
  person Person @relation(fields: [id], references: [id])

  liables Liable[]

  @@map("patient")
}

model Professional {
  profession     String  @db.VarChar(255)
  specialization String? @db.VarChar(255)
  baseDuration   Int     @default(60) @map("base_duration") @db.Integer
  registry       String  @db.VarChar(255)

  id   String @id @unique @db.Uuid
  user User   @relation(fields: [id], references: [id])

  WeeklySchedule WeeklySchedule[]
  ScheduleLock   ScheduleLock[]

  @@map("professional")
}

model Liable {
  personId String @id @unique @map("person_id") @db.Uuid
  person   Person @relation(fields: [personId], references: [id])

  patientId String  @map("patient_id") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id])

  @@map("liable")
}

model WeeklySchedule {
  id           String   @id @db.Uuid
  startTime    DateTime @map("start_time") @db.Time()
  endTime      DateTime @map("end_time") @db.Time()
  dayOfTheWeek Int      @map("day_of_the_week") @db.SmallInt

  professionalId String       @map("professional_id") @db.Uuid
  professional   Professional @relation(fields: [professionalId], references: [id])

  WeeklyScheduleLocks WeeklyScheduleLock[]

  @@map("weekly_schedule")
}

model WeeklyScheduleLock {
  id        String   @id @db.Uuid
  startTime DateTime @map("start_time") @db.Time()
  endTime   DateTime @map("end_time") @db.Time()

  weeklyScheduleId String         @map("weekly_schedule_id") @db.Uuid
  weeklySchedule   WeeklySchedule @relation(fields: [weeklyScheduleId], references: [id])

  @@map("weekly_schedule_lock")
}

model ScheduleLock {
  id        String   @id @db.Uuid
  startTime DateTime @map("start_time") @db.Time()
  endTime   DateTime @map("end_time") @db.Time()
  date      DateTime @db.Date

  professionalId String       @map("professional_id") @db.Uuid
  professional   Professional @relation(fields: [professionalId], references: [id])

  @@map("schedule_lock")
}
